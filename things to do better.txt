THINGS TO NOTE REGARDING PROGRAM FUNCTIONALITY & CODING STYLE:
1) API will not be able to detect recurring payments that occur:
    - once every 60/90/120/150/180 days 
    - the logic to check for these recurrence frequencies would essentially be the same
2) there is logic in place to check for payments that occur:
    - yearly, monthly, biweekly, weekly, daily
3) jammed everything into app.js, in real world practice it is better to keep endpoint logic 
   and helper functions in their own files and then do a module.export to improve readability 
   and for seperation of concerns; i did not expect that i would end up writing so many lines 
   of code/helper functions


KEY TAKEAWAYS:
- set trans_id as primary key in mongodb or try to set _id = trans_id
    - need to figure out how to upsert with mongodb -->
        - try insert using either db.collection.update() or db.collection.updateMany() 
        while also passing in the option {upsert: true} which checks for collisions
        

- figure out how to do a mongo query that essentially does something to the effect of  
```
    "SELECT * 
    FROM Transactions
    GROUP BY Transaction.Name
    ORDER BY Transaction.Date"
```
so that  i don't have to do all the sorting logic on a
```
    "SELECT *
    FROM Transactions" 
```
query 


- another possible implementation of figuring out recurring transactions:
    - instead of basing the recurrence off the 2 most recent transactions, try:
        1) check all differences of dates between transactions, store results into array and sort array
        2) from sorted array, extrapolate the value that occurs the most(the mode) 
           as the frequency of recurrence
        3) proceed as usual

    